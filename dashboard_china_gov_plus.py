# -*- coding: utf-8 -*-
# 中国政务服务指数（2017–2024）· 高级可视化 · Streamlit + pyecharts
# 视图：时间轴地图、雷达（单省多指标）、散点气泡（网站vs微信，气泡=综合）、年度分布箱线图、指标相关性热力图
import math
import streamlit as st
from pyecharts import options as opts
from pyecharts.charts import Map, Bar, Line, Timeline, Radar, Scatter, Boxplot, HeatMap, Page
from pyecharts.globals import ThemeType
from pyecharts.commons.utils import JsCode

st.set_page_config(page_title="中国政务服务指数 · 高级可视化", layout="wide")
FONT_SC = "Noto Sans SC, PingFang SC, Microsoft YaHei, Helvetica Neue, Arial, sans-serif"

# ---------------- 数据与工具函数（与基础版一致） ----------------
def P(name, z, web=None, weibo=None, wechat=None, app=None, shortVideo=None):
    return {"name": name, "综合指数": z, "网站指数": web, "微博指数": weibo, "微信指数": wechat, "APP指数": app, "短视频指数": shortVideo}

KEY_LABELS = {"综合指数":"综合指数","网站指数":"网站指数","微博指数":"微博指数","微信指数":"微信指数","APP指数":"APP指数","短视频指数":"短视频指数"}

# ---- 贴入数据（与基础版相同）
Y2017 = [P("北京市",69.68,76.01,87.3,75.85,47.08),P("上海市",66.12,63.28,85.0,66.64,60.25),P("重庆市",64.25,63.78,67.08,53.28,72.27),P("天津市",35.17,49.73,65.98,34.41,0),P("贵州省",64.65,68.02,71.56,42.86,73.89),P("湖北省",60.81,62.07,75.62,41.05,67.46),P("浙江省",59.13,62.44,73.27,65.49,42.33),P("福建省",57.94,78.33,60.81,47.09,36.63),P("四川省",56.13,65.69,82.62,47.37,36.51),P("湖南省",54.69,56.68,61.05,59.45,44.91),P("甘肃省",51.77,67.72,84.78,63.3,3.72),P("山东省",51.28,65.12,64.07,29.39,43.03),P("河北省",51.02,49.84,82.39,43.61,42.9),P("内蒙古自治区",50.76,58.31,70.54,41.8,37.46),P("青海省",50.73,60.09,69.31,48.61,30.03),P("江苏省",49.3,55.42,71.41,49.4,29.61),P("海南省",45.98,57.1,50.53,32.21,39.15),P("广东省",45.52,68.67,54.71,48.83,5.87),P("山西省",42.47,62.8,67.73,0,35.34),P("江西省",41.69,63.31,66.35,40.58,0),P("吉林省",40.12,49.21,74.3,53.0,0),P("新疆维吾尔自治区",39.75,46.78,79.09,47.91,3.72),P("云南省",39.66,48.25,75.17,0,41.62),P("安徽省",39.65,53.34,67.23,48.03,0),P("黑龙江省",37.27,49.67,41.0,59.81,0),P("河南省",36.64,41.86,61.92,57.5,0),P("广西壮族自治区",34.34,45.69,40.45,18.76,27.87),P("陕西省",33.27,44.44,72.0,31.11,0),P("辽宁省",30.59,43.23,59.42,26.85,1.49),P("宁夏回族自治区",27.85,35.66,56.38,31.18,0),P("西藏自治区",24.58,40.24,66.26,0,1.49)]
Y2018 = [P("北京市",76.81,78.16,94.84,72.43,69.42),P("上海市",68.46,72.8,93.65,62.41,54.63),P("重庆市",64.75,56.37,88.9,62.29,66.39),P("天津市",42.17,57.71,87.31,39.49,0),P("贵州省",75.56,83.72,79.29,73.22,64.13),P("四川省",68.21,62.63,91.9,61.3,69.7),P("广东省",66.45,79.5,77.69,75.5,35.33),P("湖南省",62.9,67.87,72.31,60.87,52.85),P("湖北省",61.02,71.84,76.07,54.45,43.61),P("河北省",60.23,64.31,88.76,58.07,41.97),P("浙江省",58.5,60.62,75.41,66.75,40.47),P("甘肃省",57.17,66.95,91.35,44.68,36.4),P("内蒙古自治区",56.06,63.77,86.08,51.21,34.14),P("海南省",55.49,68.46,68.79,56.23,30.1),P("云南省",54.31,59.58,69.51,53.38,40.07),P("河南省",52.93,42.37,73.15,63.7,49),P("西藏自治区",50.82,47.67,69.95,66.35,33.24),P("江西省",49.17,71.24,74.62,56.11,0),P("福建省",49.15,83.33,57.13,45.81,0),P("吉林省",47.57,63.68,91.61,51.33,0),P("山西省",47.05,66.05,67.82,59.65,0),P("江苏省",46.85,72.06,87.54,35.89,0),P("新疆维吾尔自治区",46.26,51.12,73.55,32.83,36.54),P("青海省",45.32,73.14,64.98,41.02,0),P("陕西省",44.1,64.99,90.46,33.71,0),P("辽宁省",43.71,56.11,52.67,29.9,32.9),P("黑龙江省",42.05,62.65,65.2,44.09,0),P("山东省",40.62,60.71,75.23,34.62,0),P("安徽省",40.12,55.95,68.92,44.56,0),P("宁夏回族自治区",38.52,60.18,69.5,29.38,0),P("广西壮族自治区",28.71,57.72,15.3,22.2,0)]
Y2019 = [P("上海市",82.38,86.36,93.57,68.24,82.52),P("重庆市",74.97,74.51,89.93,66.88,74.62),P("北京市",71.77,69.12,93.37,75.43,61.76),P("天津市",51.89,75.18,91.22,51.41,0.0),P("贵州省",75.5,80.09,76.5,69.7,73.21),P("四川省",74.7,73.64,90.75,61,79.13),P("浙江省",74.63,72.43,78.61,66.07,82.56),P("湖北省",72.82,75.51,76.45,67.51,71.51),P("安徽省",71.3,73.07,68.63,66.95,73.63),P("河南省",69.57,78.73,69.08,56.84,67.17),P("江苏省",68.32,81.21,83.86,54.66,53.45),P("吉林省",67.46,72.94,82.49,43.67,71.31),P("湖南省",65.42,60.16,74.46,62.48,70.61),P("山西省",65.14,65.52,61.34,64.06,67.36),P("内蒙古自治区",64.91,70.02,77.46,53.22,60.84),P("广东省",64.51,77.12,55.98,70.68,46.19),P("广西壮族自治区",63.76,64.53,44.5,68.78,68.31),P("江西省",61.74,58.93,74.52,69.06,53.41),P("新疆维吾尔自治区",59.8,55.94,76.57,61.14,55.77),P("云南省",58.97,53.47,83.99,77.24,39.54),P("甘肃省",58.32,64.97,88.34,62.91,30.34),P("海南省",58.18,73.21,59.41,61.17,34.13),P("福建省",57.34,76.01,59.59,48.36,37.27),P("河北省",56.69,56.01,87.69,68.15,32.97),P("山东省",51.09,61.6,73.41,31.58,40.82),P("宁夏回族自治区",49.81,73.32,62.2,63.19,0),P("辽宁省",49.66,52.43,59.04,30.31,56.58),P("陕西省",47.44,68.66,80.51,48.94,0),P("青海省",46.93,65.09,67.89,60.73,0),P("西藏自治区",45.95,39.43,66.17,54.72,37.96),P("黑龙江省",41.32,54.07,60.25,58.82,0)]
Y2020 = [P("北京市",82.17,88.37,87.97,85.61,67.83),P("重庆市",74.03,76.85,68.81,71.72,74.52),P("上海市",73.82,94.52,82.41,70.42,43.27),P("天津市",66.25,94.03,75.8,39.49,43.98),P("浙江省",82.84,85.67,78.81,71.23,90.19),P("海南省",76.66,90.16,51.94,67.59,77.37),P("云南省",75.78,71.6,78.39,70.69,84.39),P("安徽省",74.15,89.45,66.43,64.07,64.65),P("湖南省",73.15,75.06,73.57,80.03,64.77),P("山西省",70.41,83.42,75.29,51.12,65.18),P("贵州省",69.63,84.7,61.55,78.8,45.23),P("四川省",66.61,84.85,83.51,36.25,56.91),P("广西壮族自治区",65.99,58.35,47.74,63.92,87.47),P("湖北省",65.86,84.31,76.19,47.19,49.8),P("江西省",65.25,71.39,83,50.85,59.3),P("吉林省",64.47,72.55,79.89,38.29,66.39),P("广东省",63.5,80.92,78.9,77.8,19.95),P("福建省",62.97,79.32,56.53,60.38,45.38),P("江苏省",62.38,72.53,77.51,46.48,53.32),P("河北省",61.45,52.74,82.32,81.99,46.78),P("陕西省",60.68,72.72,76.84,53.73,41.3),P("内蒙古自治区",59.13,69.42,69.14,52.49,45.05),P("河南省",58.94,79.42,68.16,42.53,38.81),P("黑龙江省",58.67,81.83,51.38,54.06,33.59),P("新疆维吾尔自治区",58.28,76.31,73.52,24.38,52.52),P("甘肃省",57.57,73.53,86.99,49.55,26.94),P("西藏自治区",55.34,67.93,65.86,49.37,37.24),P("宁夏回族自治区",55.31,77.62,44.92,51.89,32.01),P("山东省",55.14,73.67,71.66,31.18,40.09),P("辽宁省",51.21,58.24,62.52,39.11,45.41),P("青海省",44.57,64.55,66.06,51.91,0)]
Y2021 = [P("北京市",82.17,85.65,90.5,53.73,72.82,64.83),P("天津市",74.03,83.04,89.26,49.09,58.83,57.45),P("上海市",73.82,84.34,90.93,37.28,66.31,80.66),P("重庆市",66.25,81.27,84.72,64.96,73.69,58.42),P("四川省",75.15,81.36,88.79,59.57,74.92,72.8),P("安徽省",73.3,77.3,75.3,80.94,65.09,59.79),P("吉林省",73.11,85.71,94.55,50.14,79.4,42.28),P("海南省",70.87,80.32,62.52,78.24,65.29,50.18),P("贵州省",70.86,72.85,80.76,77.82,62.62,53.83),P("浙江省",70.66,81.86,82.68,46.87,70.61,73.77),P("云南省",70.51,81.85,82.41,75.8,52.29,48.91),P("山西省",70.27,81.84,76.2,81.02,47.51,54.45),P("河北省",70.06,82.56,85.98,88.33,0,56.13),P("河南省",67.86,75.66,67.16,75.47,64.1,36.58),P("辽宁省",65.93,77.9,68.47,79.17,64.23,0),P("湖南省",65.86,80.32,72.65,86.31,75.06,18.16),P("广东省",65.55,83.87,89.71,49.31,0,71.09),P("陕西省",64.65,76.65,85.7,75.47,0,53.23),P("黑龙江省",64.46,74.1,87.98,57.12,0,72.59),P("湖北省",62.93,74.1,81.49,73.21,0,53.96),P("江西省",61.9,81.82,87.14,44.92,0,63.77),P("广西壮族自治区",61.4,79.05,68.02,72.43,0,49.87),P("甘肃省",61.16,71.54,91.7,63.5,0,52.88),P("山东省",60.48,80.56,75.26,44.33,0,67.22),P("福建省",59.01,79.81,74.57,69.23,0,37.5),P("内蒙古自治区",57.94,84.4,77.13,50.22,0,43.99),P("新疆维吾尔自治区",57.6,81.29,83.02,66.05,53.67,3.72),P("青海省",56.76,63.42,76.71,56.36,0,60.81),P("江苏省",55.42,75.93,92.19,48.2,0,36.81),P("宁夏回族自治区",53.84,65.89,46.97,64.6,0,55.08),P("西藏自治区",46.31,69.05,56.63,59.57,59.83,3.72)]
Y2022 = [P("上海市",87.29,83.13,93.06,95.75,92.28,68.36),P("北京市",82.09,89.68,96.04,87.53,81.61,48.48),P("天津市",75.69,84.93,86.85,65.95,88.89,44.38),P("重庆市",74.57,78.91,86.01,67.72,75.75,63.19),P("四川省",81.54,92.04,95.6,76.71,89.01,46.49),P("云南省",76.25,78.15,88.5,80.3,83.93,43.38),P("甘肃省",74.23,71.97,90.71,60.38,86.17,61.59),P("湖南省",73.51,88.1,63.69,83.47,75.31,46.49),P("湖北省",72.61,81.86,81.89,72.81,70.27,51.58),P("安徽省",72.27,84.45,65.08,67.72,89.76,43.81),P("河北省",72.18,79.91,81.37,95.32,85.36,0),P("江西省",71.51,78.88,77.73,52.63,87.12,57.7),P("浙江省",71.5,80.16,74.46,44.36,81.02,79.4),P("新疆维吾尔自治区",70.5,76.25,77.73,75.57,74.88,40.74),P("河南省",68.85,84.51,48.02,85.03,78.08,33.36),P("海南省",68.69,78.4,44.83,85.03,76.12,47.73),P("内蒙古自治区",66.69,81.43,73.23,61.73,73.8,34.39),P("陕西省",66.3,69.78,86.25,78.74,81.77,0),P("贵州省",64.89,79.02,56.16,82.43,85.72,0),P("山西省",64.6,82.74,64.68,79.05,77.12,0),P("福建省",63.11,88.81,70.25,64.28,74.05,0),P("西藏自治区",61.28,68.2,60.68,34.03,77.08,66.98),P("黑龙江省",61.14,73.71,71.62,64.7,79.55,0),P("吉林省",59.54,71.35,80.03,38.19,70.04,33.91),P("辽宁省",58.15,68.63,49.47,75.84,77.86,0),P("山东省",55.69,79.23,71.97,33.61,79.22,0),P("江苏省",54.42,69.41,69.76,41.1,78.18,0),P("宁夏回族自治区",54.18,64.09,51.76,55.71,82.59,0),P("广西壮族自治区",53.17,74.85,51.52,53.67,68.88,0),P("青海省",50.09,74.16,59.34,46.87,56.13,0),P("广东省",48.24,85.3,72.85,72.81,0,0)]
Y2023 = [P("北京市",79.86,88.93,83.97,78.31,82.69,56.4),P("天津市",70.87,80.74,71.85,66.72,90.11,25.72),P("上海市",84.86,81.61,91.95,88.41,93.13,60.49),P("重庆市",75.89,90.66,87.22,54.0,81.85,62.4),P("河北省",70.25,79.21,77.68,82.613,83.69,0),P("河南省",70.48,78.16,77.19,71.355,74.53,39.72),P("黑龙江省",68.01,73.42,78.98,79.8,81.57,0),P("湖北省",77.17,84.59,77.17,82.839,70.58,66.22),P("湖南省",72.08,83.24,63.31,82.613,80.9,30.8),P("吉林省",60.95,76.87,82.25,40.521,69.04,26.02),P("江苏省",37.72,75.72,72.82,33.006,0,0),P("江西省",66.81,85.47,76.42,37.356,80.14,48.87),P("辽宁省",64.53,75.65,69.14,73.018,78.53,0),P("四川省",79.67,94.77,91.54,77.042,66.9,64.86),P("云南省",82.77,82.52,93.4,84.105,90.75,52.79),P("青海省",56.06,78.1,55.28,47.187,59.03,28.94),P("山东省",60.92,81.15,70.54,34.498,94.12,0),P("山西省",71.51,84.22,71.82,74.003,77.9,33.59),P("陕西省",71.43,85.68,83.97,76.987,83.14,0),P("福建省",44.45,85.06,61.39,61.919,0,0),P("广东省",48.69,84.71,71.41,73.177,0,0),P("甘肃省",76.36,79.28,79.24,73.177,86.22,55.61),P("贵州省",69.08,86.68,62.03,76.987,88.59,0),P("海南省",64.31,79.96,66.45,76.981,43.37,49.5),P("浙江省",80.21,83.96,80.39,66.885,94.27,71.58),P("安徽省",69.92,83.51,57.32,64.958,87.75,40.18),P("内蒙古自治区",69.71,79.99,72.51,74.003,73.97,33.37),P("新疆维吾尔自治区",55.42,0,87.21,69.698,80.85,40.04),P("宁夏回族自治区",57.9,70.4,48.4,58.935,84.62,0),P("广西壮族自治区",59.03,82.71,67.96,45.866,75.41,0),P("西藏自治区",58.41,59.55,68.19,34.724,78.58,48.59)]
Y2024 = [P("北京市",80.7337619,92.0883,66.64287177,81.68808692,89.3912381,64.71306667),P("天津市",70.31127361,87.9419,45.48372226,74.30635762,90.6,39.72273333),P("上海市",82.4144911,90.3201,61.76100578,89.78869511,100.01,58.53006667),P("重庆市",78.24521689,83.7886,62.09433911,81.73368456,92.18133333,62.15906667),P("河北省",65.08944439,73.503625,53.20766032,70.99408285,82.64622817,36.07),P("山西省",59.29062063,74.42923889,44.75076355,77.71035644,63.82941071,24.6),P("内蒙古自治区",65.63227871,75.47561905,44.5385172,80.63489085,88.24661905,26.33),P("黑龙江省",62.62203876,72.85829286,29.43460118,76.60693193,84.26975,34.81),P("河南省",49.48046119,71.05,36.26,52.71,47.82828571,30.67),P("吉林省",56.94673942,67.99469,49.72,57.33329575,70.00190238,32.67),P("江苏省",62.53437501,79.06072857,59.7,53.08019965,72.87813095,42.28),P("湖北省",59.63051043,77.3,45.81,60.39,69.21144388,36.05),P("广西壮族自治区",62.23598215,78.17,39.39,76.91,78.45618889,24.64),P("海南省",58.38579765,80.17,39.89,78.32,35.30373333,47.42),P("湖南省",59.16252375,74.13,36.67,63.77,73.94766032,35.61),P("辽宁省",59.11597403,73.77,36.53,62.47,70.77145238,40.85),P("广东省",65.92945008,80.11,45.09,69.9,82.24465476,40.77),P("浙江省",73.73238684,78.69378611,57.36,71.63,93.83485714,58.36),P("安徽省",65.07535946,78.86004314,39.96,69.1602035,90.82137395,33.41),P("福建省",60.19974384,78.54511,26.2,65.31288964,89.65862143,25.21),P("江西省",64.46875573,72.40043333,41.87,63.13813686,94.25469048,39.5),P("山东省",62.50875471,78.93745882,44.23,51.85304226,94.25469048,32.7),P("新疆维吾尔自治区",54.99959824,66.65258444,40.76,68.11,61.21204762,28.59),P("青海省",52.3858791,71.55,17.6,68.49,61.50438095,26.99),P("四川省",63.58246916,83.94648182,54.9,65.261762,73.35866342,31.32),P("贵州省",62.76508645,79.02744,49.41,72.02489249,78.22345,24.23),P("云南省",67.31342479,73.42518431,38.35,76.19936572,88.6562465,46.96),P("西藏自治区",54.83489213,68.28829167,28.25,55.55796426,67.37340476,43.38),P("陕西省",65.08244914,78.40304848,50.59,68.36453239,93.89021212,23.1),P("甘肃省",64.18017351,76.61372,44.42,67.5627312,89.36396349,31.3),P("宁夏回族自治区",64.34154797,73.08,35.47,74.6,94.65016667,29.61)]
RAW_BY_YEAR = {"2017":{"year":"2017","rows":Y2017},"2018":{"year":"2018","rows":Y2018},"2019":{"year":"2019","rows":Y2019},"2020":{"year":"2020","rows":Y2020},"2021":{"year":"2021","rows":Y2021},"2022":{"year":"2022","rows":Y2022},"2023":{"year":"2023","rows":Y2023},"2024":{"year":"2024","rows":Y2024}}
NAME_FIX = {"北京市":"北京市","天津市":"天津市","上海市":"上海市","重庆市":"重庆市","河北省":"河北省","山西省":"山西省","辽宁省":"辽宁省","吉林省":"吉林省","黑龙江省":"黑龙江省","江苏省":"江苏省","浙江省":"浙江省","安徽省":"安徽省","福建省":"福建省","江西省":"江西省","山东省":"山东省","河南省":"河南省","湖北省":"湖北省","湖南省":"湖南省","广东省":"广东省","海南省":"海南省","四川省":"四川省","贵州省":"贵州省","云南省":"云南省","陕西省":"陕西省","甘肃省":"甘肃省","青海省":"青海省","台湾省":"台湾省","西藏自治区":"西藏自治区","广西壮族自治区":"广西壮族自治区","内蒙古自治区":"内蒙古自治区","宁夏回族自治区":"宁夏回族自治区","新疆维吾尔自治区":"新疆维吾尔自治区","香港特别行政区":"香港特别行政区","澳门特别行政区":"澳门特别行政区"}

def get_metrics_for_year(year: str):
    rows = RAW_BY_YEAR[year]["rows"]
    keys = set()
    for r in rows:
        for k in KEY_LABELS.keys():
            if r.get(k) is not None:
                keys.add(k)
    order = ["综合指数","网站指数","微博指数","微信指数","短视频指数","APP指数"]
    return [k for k in order if k in keys]

def number_range(rows, key: str):
    vals = [r.get(key) for r in rows if isinstance(r.get(key),(int,float))]
    if not vals: return (0,100)
    mn, mx = min(vals), max(vals); pad = max(1.0, (mx-mn)*0.05)
    return (max(0.0, math.floor(mn-pad)), math.ceil(mx+pad))

# ---------------- 侧边栏 ----------------
st.title("中国政务服务指数 · 高级可视化")
st.caption("更高级的图形设计与分析维度")

col = st.sidebar
years = list(RAW_BY_YEAR.keys())
year = col.selectbox("年份（用于散点/箱线/相关性）", years, index=years.index("2024"))
metric = col.selectbox("指标（用于时间轴地图、箱线、相关性）", get_metrics_for_year(year), index=0)
rows = RAW_BY_YEAR[year]["rows"]
region_options = sorted([NAME_FIX.get(r["name"], r["name"]) for r in rows])
region = col.selectbox("地区（用于雷达）", region_options, index=region_options.index("北京市") if "北京市" in region_options else 0)

# ---------------- Section A：时间轴地图（自动播放） ----------------
st.subheader("A. 时间轴·地图热图（2017–2024）")
tl = Timeline(init_opts=opts.InitOpts(theme=ThemeType.LIGHT, width="1000px", height="580px"))
tl.add_schema(is_auto_play=True, play_interval=2000, is_loop_play=True, label_opts=opts.LabelOpts(color="#666"))
for y in years:
    rows_y = RAW_BY_YEAR[y]["rows"]
    minv, maxv = number_range(rows_y, metric)
    m = (
        Map(init_opts=opts.InitOpts(theme=ThemeType.LIGHT, width="1000px", height="580px"))
        .add(series_name=f"{y}年 {metric}", data_pair=[(NAME_FIX.get(r["name"],r["name"]), r.get(metric)) for r in rows_y], maptype="china", is_map_symbol_show=False)
        .set_series_opts(label_opts=opts.LabelOpts(is_show=False, font_family=FONT_SC))
        .set_global_opts(
            title_opts=opts.TitleOpts(title=f"{y}年 · {metric} · 地图热图", pos_left="center", pos_top="2%", title_textstyle_opts=opts.TextStyleOpts(font_family=FONT_SC, font_size=16)),
            tooltip_opts=opts.TooltipOpts(formatter=JsCode("function (p){var v=(p.value==null||isNaN(p.value))?'—':Number(p.value).toFixed(2);return p.name+'<br/>'+ '%s: <b>'+v+'</b>';}" % metric)),
            visualmap_opts=opts.VisualMapOpts(min_=float(minv), max_=float(maxv), is_calculable=True, range_text=["高","低"], textstyle_opts=opts.TextStyleOpts(font_family=FONT_SC)),
            legend_opts=opts.LegendOpts(is_show=False),
        )
    )
    tl.add(m, y)

st.components.v1.html(tl.render_embed(), height=620, scrolling=False)
# ---------------- Section B：雷达（单省多指标画像） ----------------
# ---------------- Section B：雷达 ----------------
st.subheader("B. 雷达图 · 地区多指标画像")

# 该年可用指标 & 选中地区数据
metrics_y = get_metrics_for_year(year)
row_region = next((r for r in rows if NAME_FIX.get(r["name"], r["name"]) == region), None)

# 指标定义与数据（为了兼容 2.0.9，indicator 用 dict，而不是 RadarSchema）
indicator_items = []
values_region, values_mean = [], []

for k in metrics_y:
    # 该指标的全国最大值（至少 100，避免雷达外圈过小）
    nums = [r.get(k) for r in rows if isinstance(r.get(k), (int, float))]
    max_k = max(nums + [100]) if nums else 100.0
    indicator_items.append({"name": k, "max": float(max_k)})

    # 地区取值
    v = (row_region or {}).get(k)
    values_region.append(v if isinstance(v, (int, float)) else 0)

    # 全国均值
    values_mean.append(round(sum(nums) / len(nums), 2) if nums else 0)

# 生成雷达图（两系列：地区 vs 全国均值），并设置区分度更高的配色
rad = (
    Radar(init_opts=opts.InitOpts(theme=ThemeType.LIGHT, width="680px", height="440px"))
    .add_schema(
        schema=indicator_items,                                # 关键：直接传列表
        splitarea_opt=opts.SplitAreaOpts(is_show=True)         # 注意：splitarea_opt（无中划线）
    )
    # --- 选中地区 ---
    .add(
        f"{region}（{year}）",
        [values_region],
        areastyle_opts=opts.AreaStyleOpts(color="rgba(63,169,245,0.45)"),  # 浅蓝填充
        linestyle_opts=opts.LineStyleOpts(color="#3fa9f5", width=2),        # 蓝色描边
        label_opts=opts.LabelOpts(is_show=False),
        color="#3fa9f5",
    )
    # --- 全国均值 ---
    .add(
        "全国均值",
        [values_mean],
        areastyle_opts=opts.AreaStyleOpts(color="rgba(255,200,0,0.25)"),    # 浅金黄填充
        linestyle_opts=opts.LineStyleOpts(color="#ffc800", width=2),         # 金色描边
        label_opts=opts.LabelOpts(is_show=False),
        color="#ffc800",
    )
    .set_global_opts(
        title_opts=opts.TitleOpts(
            title=f"{region} · {year} 指标画像（含全国均值对比）",
            title_textstyle_opts=opts.TextStyleOpts(font_family=FONT_SC, font_size=16)
        ),
        legend_opts=opts.LegendOpts(is_show=True, pos_left="left", pos_top="5%"),
    )
)

st.components.v1.html(rad.render_embed(), height=470, scrolling=False)




# ---------------- Section C：散点气泡（网站 vs 微信，气泡=综合） ----------------
st.subheader("C. 散点气泡 · 网站指数 vs 微信指数（气泡大小=综合指数）")

def pick(k, d, default=None):
    v = d.get(k); return v if isinstance(v, (int, float)) else default

scatter_data = []
for r in rows:
    x = pick("网站指数", r); y = pick("微信指数", r); s = pick("综合指数", r); n = r["name"]
    if x is not None and y is not None and s is not None:
        scatter_data.append([x, y, s, n])

if scatter_data:
    xs = [d[0] for d in scatter_data]
    ys = [d[1] for d in scatter_data]
    pad_x = max(1.0, (max(xs) - min(xs)) * 0.05)
    pad_y = max(1.0, (max(ys) - min(ys)) * 0.05)

    sct = (
        Scatter(init_opts=opts.InitOpts(theme=ThemeType.LIGHT, width="900px", height="520px"))
        .add_xaxis([])  # 数值轴时，x 在 data 里传，这里留空即可
        .add_yaxis(
            f"{year} 网站 vs 微信",
            scatter_data,  # 形如 [[x, y, size, name], ...]
            symbol_size=JsCode("function (data){ return Math.max(8, Math.sqrt(data[2]) * 2); }"),
            label_opts=opts.LabelOpts(is_show=False),
            tooltip_opts=opts.TooltipOpts(
                formatter=JsCode(
                    "function(p){return p.value[3]+'<br/>网站: '+p.value[0].toFixed(2)"
                    "+'<br/>微信: '+p.value[1].toFixed(2)"
                    "+'<br/>综合: '+p.value[2].toFixed(2);}"
                )
            ),
        )
        .set_global_opts(
            xaxis_opts=opts.AxisOpts(
                type_="value", name="网站指数",
                min_=min(xs) - pad_x, max_=max(xs) + pad_x
            ),
            yaxis_opts=opts.AxisOpts(
                type_="value", name="微信指数",
                min_=min(ys) - pad_y, max_=max(ys) + pad_y
            ),
            legend_opts=opts.LegendOpts(is_show=False),
            title_opts=opts.TitleOpts(
                title=f"{year} 网站 vs 微信（气泡=综合）",
                title_textstyle_opts=opts.TextStyleOpts(font_family=FONT_SC, font_size=16)
            ),
        )
    )
    st.components.v1.html(sct.render_embed(), height=560, scrolling=False)
else:
    st.info("该年缺少网站/微信/综合三项完整数据，无法绘制散点气泡。")


# ---------------- Section D：年度分布箱线图（按年看某指标的离散程度） ----------------
st.subheader("D. 年度分布 · 箱线图")
all_box = []
for y in years:
    rs = RAW_BY_YEAR[y]["rows"]
    arr = [r.get(metric) for r in rs if isinstance(r.get(metric),(int,float))]
    if arr: all_box.append((y, arr))
box = Boxplot(init_opts=opts.InitOpts(theme=ThemeType.LIGHT, width="1000px", height="420px"))
box.add_xaxis([x for x,_ in all_box])
box.add_yaxis(f"{metric} 分布", box.prepare_data([v for _, v in all_box]))
box.set_global_opts(title_opts=opts.TitleOpts(title=f"{metric} · 历年分布", title_textstyle_opts=opts.TextStyleOpts(font_family=FONT_SC, font_size=16)), legend_opts=opts.LegendOpts(is_show=False))
st.components.v1.html(box.render_embed(), height=460, scrolling=False)

# ---------------- Section E：指标相关性热力图（该年） ----------------
st.subheader("E. 指标相关性 · 热力图（该年）")
metrics_y = get_metrics_for_year(year)
# 计算皮尔逊相关（简单实现）
def corr(xs, ys):
    n = len(xs)
    if n==0: return 0.0
    mx = sum(xs)/n; my = sum(ys)/n
    num = sum((x-mx)*(y-my) for x,y in zip(xs,ys))
    denx = sum((x-mx)**2 for x in xs); deny = sum((y-my)**2 for y in ys)
    if denx<=0 or deny<=0: return 0.0
    return num / (denx**0.5 * deny**0.5)

series = []
for i,ki in enumerate(metrics_y):
    row_i = []
    for j,kj in enumerate(metrics_y):
        xi = [r.get(ki) for r in rows if isinstance(r.get(ki),(int,float)) and isinstance(r.get(kj),(int,float))]
        yj = [r.get(kj) for r in rows if isinstance(r.get(ki),(int,float)) and isinstance(r.get(kj),(int,float))]
        c = corr(xi, yj) if xi and yj else 0.0
        row_i.append(c)
    series.append(row_i)

# 组装 HeatMap 数据
data_heat = []
for i,ki in enumerate(metrics_y):
    for j,kj in enumerate(metrics_y):
        data_heat.append([i, j, float(series[i][j])])

hm = (
    HeatMap(init_opts=opts.InitOpts(theme=ThemeType.LIGHT, width="700px", height="520px"))
    .add_xaxis(metrics_y)
    .add_yaxis("corr", metrics_y, data_heat, label_opts=opts.LabelOpts(is_show=False))
    .set_global_opts(
        title_opts=opts.TitleOpts(title=f"{year} 指标相关性（皮尔逊 r）", title_textstyle_opts=opts.TextStyleOpts(font_family=FONT_SC, font_size=16)),
        visualmap_opts=opts.VisualMapOpts(min_=-1, max_=1, orient="horizontal", pos_left="center", pos_bottom="2%", range_text=["相关性高","相关性低"], textstyle_opts=opts.TextStyleOpts(font_family=FONT_SC)),
        legend_opts=opts.LegendOpts(is_show=False),
        xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(font_family=FONT_SC)),
        yaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(font_family=FONT_SC)),
    )
)
st.components.v1.html(hm.render_embed(), height=560, scrolling=False)

st.caption("高级视图：时间轴地图/雷达/散点/箱线/相关性热力图。全部启用中文字体。")
